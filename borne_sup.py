from donnees import import_donnees_from_json
import numpy as np

def borne_lagrangienne(D):
    i = 0
    itermax = 5

    # coefs relaxation
    Œ± = 0.9
    œÅ = 2

    len(D.Articles) * len(lots)
    # vecteurs multiplicateur de lagrange
    Œª, Œº = np.zeros()

    while i < itermax:
        # R√©solution du sous-probl√®me Lagrangien ùêíùêèùêãùüè(Œª, ùúá) ‚Üí ùë•ùëñùëò(ÃÖÃÖÃÖÃÖÃÖ Œª, ùúá)
        # xik = nombre d‚Äôarticles de type i impliqu√© dans les lots de type k
        # couts r√©gus       


        # R√©solution du sous-probl√®me Lagrangien ùêíùêèùêãùüê(Œª) ‚Üí ùë¶ùëñùëò(ÃÖÃÖÃÖÃÖÃÖ Œª)
        # yik = 1 si l‚Äôarticle i est constitutif d‚Äôun lot de type k, 0 sinon
        # couts r√©gus

        # R√©solution du sous-probl√®me Lagrangien ùêíùêèùêãùüë( ùúá) ‚Üí ùë¢ùëò (ÃÖÃÖÃÖÃÖÃÖ ùúá)
        # uk = nombre de lots de type k conditionn√©s
        # couts r√©gus

        # Calcul de la fonction duale

        # Sauvegarde de l‚Äôoptimum dual courant

        # Calcul des composantes du sous-gradient de L au point (ùõå, ùùÅ)

        # Mise √† jour des multiplicateurs de Lagrange

        i += 1

        # r√©vision coef de relaxation
        œÅ = Œ± * œÅ


def lots_possibles(D):
    # Lots possibles
    lots = list(chain(*map(lambda x: combinations(D.Articles, x),
                range(D.e_min, D.e_max + 1))))
    print("Nombre de lots possibles : " + str(len(lots)))
    
    # Lots avec un indice commercial suffisant
    lots = list(filter(lambda x: sum(
        [article.indice for article in x]) >= D.r_min, lots))
    print("Nombre de lots avec un indice commercial suffisant : " + str(len(lots)))

    # Trie par profit net d√©croissant/ nombre d'articles
    lots = sorted(lots, key=lambda x: len(
        x) / (sum([article.prix for article in x]) - D.cd * len(x)))
    
    lots = [list(lot) for lot in lots]
    return lots

instance = "instances_test/test1.json"
D = import_donnees_from_json(instance)
borne_lagrangienne(D)
